import json
from bs4 import BeautifulSoup

# -------------------------------------------
# STEP 1: Load JSON Data
# -------------------------------------------
def load_json_data(filepath):
    """Loads and parses JSON conversation data."""
    with open(filepath, "r", encoding="utf-8") as f:
        data = json.load(f)
    
    # Handle both possible structures (dict or list)
    if isinstance(data, dict):
        return data.get("conversations", [])
    elif isinstance(data, list):
        return data
    return []

# -------------------------------------------
# STEP 2: Load HTML Data
# -------------------------------------------
def load_html_data(filepath):
    """Parses HTML-based chat logs into structured conversation messages."""
    with open(filepath, "r", encoding="utf-8") as f:
        soup = BeautifulSoup(f.read(), "html.parser")

    conversations = []
    for conv_div in soup.find_all("div", class_="conversation"):
        messages = []
        for msg_div in conv_div.find_all("div", class_="message"):
            role = msg_div.get("data-role", "unknown").strip().lower()
            content = msg_div.get_text(strip=True)
            timestamp = msg_div.get("data-timestamp")

            messages.append({
                "role": role if role in ["user", "assistant"] else "unknown",
                "content": content,
                "timestamp": float(timestamp) if timestamp else None
            })
        conversations.append(messages)

    return conversations

# -------------------------------------------
# STEP 3: Format & Structure Conversations
# -------------------------------------------
def format_conversations(json_data, html_data):
    """Combines JSON and HTML data, ensuring correct role assignments and valid content."""
    formatted_convos = json_data + html_data
    structured_convos = []

    for conv in formatted_convos:
        formatted_messages = []
        for msg in conv:
            # Convert string messages into structured format if necessary
            if isinstance(msg, str):
                msg = {"role": "unknown", "content": msg, "timestamp": None}

            # Ignore metadata fields
            if msg.get("content") in ["uuid", "name", "created_at", "updated_at", "account", "chat_messages"]:
                continue

            formatted_messages.append({
                "role": msg.get("role", "unknown"),
                "content": msg.get("content", "").strip(),
                "timestamp": msg.get("timestamp")
            })
        
        structured_convos.append(formatted_messages)

    return structured_convos
